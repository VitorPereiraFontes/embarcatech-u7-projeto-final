/**
 * @file SSD1306.h
 * @author Wilton Lacerda Silva
 * 
 * @brief Arquivo de cabeçalho para as funções que irão interagir diretamente com display
 * OLED SSD1306
 */
#ifndef _SSD1306_H
  #define _SSD1306_H

  #include <stdlib.h>
  #include "pico/stdlib.h"
  #include "hardware/i2c.h"

  #define WIDTH 128
  #define HEIGHT 64
  #define I2C_PORT i2c1 // Porta utilizada para comunicação I2C com o display OLED
  #define OLED_DISPLAY_I2C_ADDRESS 0x3C
  #define OLED_DISPLAY_SDA_GPIO 14
  #define OLED_DISPLAY_SCL_GPIO 15
  #define OLED_DISPLAY_CLOCK_FREQUENCY 400 * 1000 // Define a frequência de comunicação com o  display OLED para 400 KHz

  typedef enum {
    SET_CONTRAST = 0x81,
    SET_ENTIRE_ON = 0xA4,
    SET_NORM_INV = 0xA6,
    SET_DISP = 0xAE,
    SET_MEM_ADDR = 0x20,
    SET_COL_ADDR = 0x21,
    SET_PAGE_ADDR = 0x22,
    SET_DISP_START_LINE = 0x40,
    SET_SEG_REMAP = 0xA0,
    SET_MUX_RATIO = 0xA8,
    SET_COM_OUT_DIR = 0xC0,
    SET_DISP_OFFSET = 0xD3,
    SET_COM_PIN_CFG = 0xDA,
    SET_DISP_CLK_DIV = 0xD5,
    SET_PRECHARGE = 0xD9,
    SET_VCOM_DESEL = 0xDB,
    SET_CHARGE_PUMP = 0x8D
  } ssd1306_command_t;

  typedef struct {
    uint8_t width, height, pages, address;
    i2c_inst_t *i2c_port;
    bool external_vcc;
    uint8_t *ram_buffer;
    size_t bufsize;
    uint8_t port_buffer[2];
  } ssd1306_t;

  void ssd1306_init(ssd1306_t *ssd, uint8_t width, uint8_t height, bool external_vcc, uint8_t address, i2c_inst_t *i2c);
  void ssd1306_config(ssd1306_t *ssd);
  void ssd1306_command(ssd1306_t *ssd, uint8_t command);
  void ssd1306_send_data(ssd1306_t *ssd);

  void ssd1306_pixel(ssd1306_t *ssd, uint8_t x, uint8_t y, bool value);
  void ssd1306_fill(ssd1306_t *ssd, bool value);
  void ssd1306_rect(ssd1306_t *ssd, uint8_t top, uint8_t left, uint8_t width, uint8_t height, bool value, bool fill);
  void ssd1306_line(ssd1306_t *ssd, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, bool value);
  void ssd1306_hline(ssd1306_t *ssd, uint8_t x0, uint8_t x1, uint8_t y, bool value);
  void ssd1306_vline(ssd1306_t *ssd, uint8_t x, uint8_t y0, uint8_t y1, bool value);
  void ssd1306_draw_char(ssd1306_t *ssd, char c, uint8_t x, uint8_t y);
  void ssd1306_draw_string(ssd1306_t *ssd, const char *str, uint8_t x, uint8_t y);

  /**
   * @brief Limpa os dados do display
   */
  void clear();

  /**
   * @brief Desenha a tela de exibição dos dados
   * 
   * @param zx_angle Ângulo entre o eixo espacial Z e X
   * @param zy_angle Ângulo entre o eixo espacial Z e Y
   */
  void draw_data_screen(uint8_t zx_angle, uint8_t zy_angle);

  /**
   * @brief Desenha a tela de informe de reset na calibração
   */
  void draw_resetting_screen();

  /**
   * @brief Desenha a tela de informe de calibração
   */
  void draw_calibrating_screen();

  /**
   * @brief Inicializa e configura o bloco KY008
   */
  void setup_SSD1306_block();

  /**
   * @brief Atualiza o bloco KY008 com os dados do contexto global da aplicação
   */
  void run_SSD1306_block();

  /**
   * @brief Fontes para caracteres de 8x8 pixels, variando de A-Z, a-z e 0-9
   */
  static uint8_t font[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Nothing
    0x3e, 0x41, 0x41, 0x49, 0x41, 0x41, 0x3e, 0x00, //0
    0x00, 0x00, 0x42, 0x7f, 0x40, 0x00, 0x00, 0x00, //1
    0x30, 0x49, 0x49, 0x49, 0x49, 0x46, 0x00, 0x00, //2
    0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x36, 0x00, //3
    0x3f, 0x20, 0x20, 0x78, 0x20, 0x20, 0x00, 0x00, //4
    0x4f, 0x49, 0x49, 0x49, 0x49, 0x30, 0x00, 0x00, //5
    0x3f, 0x48, 0x48, 0x48, 0x48, 0x48, 0x30, 0x00, //6
    0x01, 0x01, 0x01, 0x61, 0x31, 0x0d, 0x03, 0x00, //7
    0x36, 0x49, 0x49, 0x49, 0x49, 0x49, 0x36, 0x00, //8
    0x06, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7f, 0x00, //9
    0x78, 0x14, 0x12, 0x11, 0x12, 0x14, 0x78, 0x00, //A
    0x7f, 0x49, 0x49, 0x49, 0x49, 0x49, 0x7f, 0x00, //B
    0x7e, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x00, //C
    0x7f, 0x41, 0x41, 0x41, 0x41, 0x41, 0x7e, 0x00, //D
    0x7f, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x00, //E
    0x7f, 0x09, 0x09, 0x09, 0x09, 0x01, 0x01, 0x00, //F
    0x7f, 0x41, 0x41, 0x41, 0x51, 0x51, 0x73, 0x00, //G
    0x7f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x7f, 0x00, //H
    0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, //I
    0x21, 0x41, 0x41, 0x3f, 0x01, 0x01, 0x01, 0x00, //J
    0x00, 0x7f, 0x08, 0x08, 0x14, 0x22, 0x41, 0x00, //K
    0x7f, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, //L
    0x7f, 0x02, 0x04, 0x08, 0x04, 0x02, 0x7f, 0x00, //M
    0x7f, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7f, 0x00, //N
    0x3e, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3e, 0x00, //O
    0x7f, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x00, //P
    0x3e, 0x41, 0x41, 0x49, 0x51, 0x61, 0x7e, 0x00, //Q
    0x7f, 0x11, 0x11, 0x11, 0x31, 0x51, 0x0e, 0x00, //R
    0x46, 0x49, 0x49, 0x49, 0x49, 0x30, 0x00, 0x00, //S
    0x01, 0x01, 0x01, 0x7f, 0x01, 0x01, 0x01, 0x00, //T
    0x3f, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3f, 0x00, //U
    0x0f, 0x10, 0x20, 0x40, 0x20, 0x10, 0x0f, 0x00, //V
    0x7f, 0x20, 0x10, 0x08, 0x10, 0x20, 0x7f, 0x00, //W
    0x00, 0x41, 0x22, 0x14, 0x14, 0x22, 0x41, 0x00, //X
    0x01, 0x02, 0x04, 0x78, 0x04, 0x02, 0x01, 0x00, //Y
    0x41, 0x61, 0x59, 0x45, 0x43, 0x41, 0x00, 0x00, //Z
    0x00, 0x00, 0x30, 0x4A, 0x4A, 0x4A, 0x3C, 0x00, //a
    0x00, 0x00, 0x3E, 0x48, 0x48, 0x48, 0x30, 0x00, //b
    0x00, 0x18, 0x24, 0x42, 0x42, 0x24, 0x00, 0x00, //c
    0x00, 0x00, 0x30, 0x48, 0x48, 0x48, 0x3E, 0x00, //d
    0x00, 0x3C, 0x4A, 0x4A, 0x4A, 0x4A, 0x24, 0x00, //e
    0x00, 0x00, 0x10, 0x7C, 0x12, 0x12 ,0x00, 0x00, //f
    0x00, 0x24, 0x4A, 0x4A, 0x4A, 0x3C, 0x00, 0x00, //g
    0x00, 0x7E, 0x10, 0x08, 0x08, 0x70, 0x00, 0x00, //h
    0x00, 0x00, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00, //i
    0x00, 0x00, 0x20, 0x40, 0x40, 0x3A, 0x00, 0x00, //j
    0x00, 0x00, 0x3E, 0x08, 0x14, 0x22, 0x00, 0x00, //k
    0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, //l
    0x00, 0x08, 0x70, 0x08, 0x70, 0x08, 0x70, 0x00, //m
    0x00, 0x08, 0x70, 0x08, 0x08, 0x70, 0x00, 0x00, //n
    0x00, 0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x00, //o
    0x00, 0x00, 0x7C, 0x12, 0x12, 0x0C, 0x00, 0x00, //p
    0x00, 0x00, 0x0C, 0x12, 0x12, 0x7C, 0x00, 0x00, //q
    0x00, 0x00, 0x7C, 0x08, 0x04, 0x18, 0x00, 0x00, //r
    0x00, 0x00, 0x48, 0x54, 0x54, 0x24, 0x00, 0x00, //s
    0x00, 0x04, 0x04, 0x3F, 0x44, 0x04, 0x00, 0x00, //t
    0x00, 0x00, 0x38, 0x40, 0x40, 0x78, 0x00, 0x00, //u
    0x00, 0x18, 0x20, 0x40, 0x20, 0x18, 0x00, 0x00, //v
    0x00, 0x00, 0x38, 0x40, 0x38, 0x40, 0x78, 0x00, //w
    0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00, //x
    0x00, 0x00, 0x0C, 0x90, 0x90, 0x90, 0x7C, 0x00, //y
    0x00, 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, //z
    0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, // .
    0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00 // :
  };
#endif